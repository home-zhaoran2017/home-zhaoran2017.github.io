{"meta":{"title":"Hompage of Ran Zhao","subtitle":null,"description":null,"author":"Ran Zhao","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2017-11-17T11:47:09.000Z","updated":"2017-11-17T11:48:08.235Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"线性模型","slug":"线性模型","date":"2018-08-23T04:38:12.000Z","updated":"2018-08-26T09:26:30.580Z","comments":true,"path":"2018/08/23/线性模型/","link":"","permalink":"http://yoursite.com/2018/08/23/线性模型/","excerpt":"","text":"一. 基本形式由$d$个属性描述的实例$x=(x_1; x_2; …; x_d)$，线性回归试图学得一个通过属性的线性组合来预测的函数： f(x)=w_1 x_1 + w_2 x_2 + ... + w_d x_d + b向量形式写成： $ f(x)=w^T x+b$ ，其中 $w = (w_1; w_2; …; w_d)$ 二. 线性回归设样本集的数目为$m$，$x$代表输入变量（特征），$y$代表输出变量（目标），$(x,y)$代表样本集中的实例，$(x^i,y^i)$代表样本集中第$i$个实例，函数$f(x)$是模型的假设。 1. 损失函数模型的参数$w, b$决定模型预测能力的好坏，模型在训练集中的预测值与实际值的差距是我们的建模误差，代价函数即定义为建模误差的平方和： $ J(w, b) = \\frac{1}{2m} \\sum_{i=1}^{m}(f(x^i)-y^i)^2 $ 我们的目标是选择使代价函数最小的模型参数。 2. 梯度下降法$w = w - \\alpha \\frac{\\partial}{\\partial w}J(w,b)$ $b = b - \\alpha \\frac{\\partial}{\\partial b}J(w,b)$ $\\alpha$ 是学习率 $\\frac{\\partial}{\\partial b}J(w,b) = \\frac{1}{m}\\sum_{i=1}^{m}(f(x^i)-y^i)$ $\\frac{\\partial}{\\partial w}J(w,b) = \\frac{1}{m}\\sum_{i=1}^{m}((f(x^i)-y^i)*x^i)$ 3. 最小二乘法三. 逻辑回归逻辑回归用来处理$y$值是离散情况的分类问题。 1. 分类问题2. 假说表示3. 判定边界4. 代价函数与梯度下降四. 正则化","categories":[],"tags":[]},{"title":"MNIST数据集","slug":"MNIST数据集","date":"2018-08-23T02:21:00.000Z","updated":"2018-08-23T02:24:05.991Z","comments":true,"path":"2018/08/23/MNIST数据集/","link":"","permalink":"http://yoursite.com/2018/08/23/MNIST数据集/","excerpt":"MNIST 数据集可在 http://yann.lecun.com/exdb/mnist/ 获取，它包含了四个部分：","text":"MNIST 数据集可在 http://yann.lecun.com/exdb/mnist/ 获取，它包含了四个部分： Training set images： train-images-idx3-ubyte.gz (9.9 MB, 解压后 47 MB, 包含 60,000 个样本) Training set labels： train-labels-idx1-ubyte.gz (29 KB, 解压后 60 KB, 包含 60,000 个标签) Test set images： t10k-images-idx3-ubyte.gz (1.6 MB, 解压后 7.8 MB, 包含 10,000 个样本) Test set labels： t10k-labels-idx1-ubyte.gz (5KB, 解压后 10 KB, 包含 10,000 个标签) MNIST 数据集来自美国国家标准与技术研究所，National Institute of Standards and Technology (NIST)，训练集 (training set) 由来自 250 个不同人手写的数字构成，其中 50% 是高中学生，50% 来自人口普查局 (the Census Bureau) 的工作人员。测试集(test set) 也是同样比例的手写数字数据。 图片是以字节的形式进行存储, 我们需要把它们读取到 NumPy array 中，以便训练和测试算法。 12345678910111213141516171819202122232425import osimport structimport numpy as npdef load_mnist(path, kind='train'): \"\"\"Load MNIST data from `path`\"\"\" labels_path = os.path.join(path, '%s-labels-idx1-ubyte' % kind) images_path = os.path.join(path, '%s-images-idx3-ubyte' % kind) with open(labels_path, 'rb') as lbpath: magic, n = struct.unpack('&gt;II', lbpath.read(8)) labels = np.fromfile(lbpath, dtype=np.uint8) with open(images_path, 'rb') as imgpath: magic, num, rows, cols = struct.unpack('&gt;IIII', imgpath.read(16)) images = np.fromfile(imgpath, dtype=np.uint8).reshape(len(labels), 784) return images, labels load_mnist 函数返回两个数组，第一个是一个 n x m 维的 NumPy array(images)，这里的 n 是样本数(行数)，m 是特征数(列数)。训练数据集包含 60000 个样本，测试数据集包含 10000 样本。在 MNIST 数据集中的每张图片由 28 x 28 个像素点构成，每个像素点用一个灰度值表示。在这里, 我们将 28 x 28 的像素展开为一个一维的行向量，这些行向量就是图片数组里的行(每行 784 个值，或者说每行就是代表了一张图片)。 load_mnist 函数返回的第二个数组(labels) 包含了相应的目标变量，也就是手写数字的类标签(整数 0-9)。 通过执行上面的代码，我们将会从刚刚解压 MNIST 数据集后的 mnist 目录下加载 60000 个训练样本和 10000 个测试样本。 为了了解 MNIST 中的图片看起来到底是个啥，让我们来对它们进行可视化处理。从 feature matrix 中将 784-像素值的向量 reshape 为之前的 28*28 的形状，然后通过 matplotlib 的 imshow 函数进行绘制： 1234567891011121314151617import matplotlib.pyplot as pltfig, ax = plt.subplots( nrows=2, ncols=5, sharex=True, sharey=True, )ax = ax.flatten()for i in range(10): img = X_train[y_train == i][0].reshape(28, 28) ax[i].imshow(img, cmap='Greys', interpolation='nearest')ax[0].set_xticks([])ax[0].set_yticks([])plt.tight_layout()plt.show() 此外，我们还可以绘制某一数字的多个样本图片，来看一下这些手写样本到底有多不同： 123456789101112131415fig, ax = plt.subplots( nrows=5, ncols=5, sharex=True, sharey=True, )ax = ax.flatten()for i in range(25): img = X_train[y_train == 7][i].reshape(28, 28) ax[i].imshow(img, cmap='Greys', interpolation='nearest')ax[0].set_xticks([])ax[0].set_yticks([])plt.tight_layout()plt.show()","categories":[],"tags":[]},{"title":"使用Pandas模块读取csv格式文件","slug":"使用Pandas模块读取csv格式文件","date":"2018-08-22T08:34:09.000Z","updated":"2018-09-25T03:04:33.181Z","comments":true,"path":"2018/08/22/使用Pandas模块读取csv格式文件/","link":"","permalink":"http://yoursite.com/2018/08/22/使用Pandas模块读取csv格式文件/","excerpt":"在数据处理中，常遇到csv格式的文件，下面简要介绍如何使用Python中的Pandas模块来读取csv文件中的数据。","text":"在数据处理中，常遇到csv格式的文件，下面简要介绍如何使用Python中的Pandas模块来读取csv文件中的数据。 一. CSV文件CSV(Comma-Separated Values)文件以纯文本形式存储表格数据，文件由任意数目的记录组成，记录间以换行符分隔，每条记录由字段组成，字段间的分隔符可自定义，通常是逗号。下面的数据取自Kaggle中Titanic的乘客信息数据。 1234567891011PassengerId,Pclass,Name,Sex,Age,SibSp,Parch,Ticket,Fare,Cabin,Embarked892,3,&quot;Kelly, Mr. James&quot;,male,34.5,0,0,330911,7.8292,,Q893,3,&quot;Wilkes, Mrs. James (Ellen Needs)&quot;,female,47,1,0,363272,7,,S894,2,&quot;Myles, Mr. Thomas Francis&quot;,male,62,0,0,240276,9.6875,,Q895,3,&quot;Wirz, Mr. Albert&quot;,male,27,0,0,315154,8.6625,,S896,3,&quot;Hirvonen, Mrs. Alexander (Helga E Lindqvist)&quot;,female,22,1,1,3101298,12.2875,,S897,3,&quot;Svensson, Mr. Johan Cervin&quot;,male,14,0,0,7538,9.225,,S898,3,&quot;Connolly, Miss. Kate&quot;,female,30,0,0,330972,7.6292,,Q899,2,&quot;Caldwell, Mr. Albert Francis&quot;,male,26,1,1,248738,29,,S900,3,&quot;Abrahim, Mrs. Joseph (Sophie Halaut Easu)&quot;,female,18,0,0,2657,7.2292,,C901,3,&quot;Davies, Mr. John Samuel&quot;,male,21,2,0,A/4 48871,24.15,,S 二. Pandas模块 导入pandas模块 1import pandas as pd 读取csv文件中的数据 1data = pd.read_csv(\"train.csv\",sep=',') 参数sep设定csv文件中分隔符，默认为,。 数据集对应的参数名 1data.columns 第 $i$ 条记录 1data.iloc[i-1] 数据集的大小 1data.shape 数据集的描述 1data.describe 数据集参数数组里的不同值 1titanic['Sex'].unique() 数据集字符串到数字的映射 12titanic.loc[titanic['Sex']=='male','Sex']=0titanic.loc[titanic['Sex']=='female','Sex']=1 数据集中缺失数据的补填 1titanic['Age']=titanic['Age'].fillna(titanic['Age'].median())","categories":[],"tags":[]}]}